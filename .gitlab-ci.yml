# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# stages:          # List of stages for jobs, and their order of execution
#   - build
#   - test
#   - deploy

# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."

variables:
    DOCKER_DRIVER: overlay2
  
stages:
    
    - deploy

deploy-dev:
    only:
      - staging
    stage: deploy
    image: alpine:3.12
    before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - eval "$(ssh-agent -s)"
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - chmod 700 ~/.ssh
    - ssh-keyscan -H '13.57.70.213' >> ~/.ssh/known_hosts
 #   - echo "kd23Dfdf8kd"@1YX"
    script:
    - ssh  -o StrictHostKeyChecking=no ubuntu@13.57.70.213 cd /home/ubuntu/bizb-dev/reaction-development-platform
    - ssh -o StrictHostKeyChecking=no ubuntu@13.57.70.213 sudo rm -rf /example-storefront
    - ssh -o StrictHostKeyChecking=no ubuntu@13.57.70.213 sudo git clone https://gitlab+deploy-token-1715785:cJQKGGPp3cXr6TbsBy46@gitlab.com/Codistan/bizb/example-storefront.git
    - ssh -o StrictHostKeyChecking=no ubuntu@13.57.70.213 "cd example-storefront && sudo git checkout staging"
    - ssh  -o StrictHostKeyChecking=no ubuntu@13.57.70.213 "cd /home/ubuntu/bizb-dev/reaction-development-platform/example-storefront && sudo docker build --tag=bizb:ui . && sudo docker run -d --rm -it --network host bizb:ui"

