# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# stages:          # List of stages for jobs, and their order of execution
#   - build
#   - test
#   - deploy

# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."

# variables:
#     DOCKER_DRIVER: overlay2
  
# stages:
    
#     - deploy

# deploy-dev:
#     only:
#       - staging
#     stage: deploy
#     image: alpine:3.12
#     before_script:
#     - apk add --no-cache openssh
#     - mkdir -p ~/.ssh
#     - eval "$(ssh-agent -s)"
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - chmod 700 ~/.ssh
#     - ssh-keyscan -H '13.57.70.213' >> ~/.ssh/known_hosts
 #   - echo "kd23Dfdf8kd"@1YX"
    # script:
    # - ssh  -o StrictHostKeyChecking=no ubuntu@13.57.70.213 "cd /home/ubuntu/bizb-dev/reaction-development-platform && sudo rm -rf example-storefront"
    #- ssh -o StrictHostKeyChecking=no ubuntu@13.57.70.213 sudo rm -rf /example-storefront
    # - ssh -o StrictHostKeyChecking=no ubuntu@13.57.70.213 "cd /home/ubuntu/bizb-dev/reaction-development-platform && sudo git clone https://gitlab+deploy-token-1715785:cJQKGGPp3cXr6TbsBy46@gitlab.com/Codistan/bizb/example-storefront.git"
    # - ssh -o StrictHostKeyChecking=no ubuntu@13.57.70.213 "cd /home/ubuntu/bizb-dev/reaction-development-platform/example-storefront && sudo git checkout staging"
    # - ssh -o StrictHostKeyChecking=no ubuntu@13.57.70.213 "cd /home/ubuntu/bizb-dev/reaction-development-platform/example-storefront && git pull origin staging"
    # - ssh -o StrictHostKeyChecking=no ubuntu@13.57.70.213 "cd /home/ubuntu/bizb-dev/reaction-development-platform/example-storefront && sudo docker-compose up"
    #- ssh  -o StrictHostKeyChecking=no ubuntu@13.57.70.213 "cd /home/ubuntu/bizb-dev/reaction-development-platform/example-storefront && sudo docker build --tag=bizb:ui . && sudo docker run -d --rm -it --network host bizb:ui" 


# image: docker:19.03.13

# services:
#   - docker:19.03.13-dind

# before_script:
#   - rm -rf .cache
#   - rm -rf node_modules

# stages:
#   # - checkout
#   # - build
#   - deploy

# checkout_code:
#   stage: checkout
#   script:
#     - git checkout ranchers-dev
#     - git pull origin ranchers-dev

# build_docker_image:
#   stage: build
#   script:
#     - echo "$DOCKER_PASSWORD_VAR" | docker login -u "$DOCKER_USERNAME" --password-stdin
#     # - docker rmi ranchers:api
#     # - export IMAGE_TAG=$(date +%Y%m%d%H%M%S)
#     # - git checkout ranchers-dev
#     - docker build --no-cache -t bizb:example-storefront .
#     - docker tag bizb:example-storefront $DOCKER_USERNAME/bizb-frontend-production
#     - docker push $DOCKER_USERNAME/bizb-frontend-production
#   only:
#     - production


deploy-aws-ecs-dev:
  stage: deploy
  image: docker:19.03.1
  variables:
    DOCKER_REGISTRY: codistan/bizb-frontend-production
    AWS_DEFAULT_REGION: ap-southeast-1
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_dev
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_dev
    TASK_DEFINITION_NAME: bizb-frontend-task
    CLUSTER_NAME: bizb-cluster
    SERVICE_NAME: bizb-frontend
  services:
    - docker:19.03.1-dind
  only:
    - production
  before_script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - $(aws ecr get-login --no-include-email --region "${AWS_DEFAULT_REGION}")
    - IMAGE_TAG=latest
  script:
  - echo ${DOCKER_REGISTRY}:$IMAGE_TAG
  - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_NAME" --region "${AWS_DEFAULT_REGION}")
  - NEW_CONTAINER_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${DOCKER_REGISTRY}:$IMAGE_TAG" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions[0]')
  - echo "Registering new container definition..."
  - aws ecs register-task-definition --region "${AWS_DEFAULT_REGION}" --family "${TASK_DEFINITION_NAME}" --container-definitions "${NEW_CONTAINER_DEFINTIION}"
  - echo "Updating the service..."
  - aws ecs update-service --region "${AWS_DEFAULT_REGION}" --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}"  --task-definition "${TASK_DEFINITION_NAME}" --force-new-deployment

# deploy_to_remote:
#   stage: deploy
#   before_script:
#     - apk add --no-cache openssh
#     - mkdir -p ~/.ssh
#     - eval "$(ssh-agent -s)"
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - chmod 700 ~/.ssh
#     - ssh-keyscan -H '13.57.70.213' >> ~/.ssh/known_hosts
 # script:
    # - apk add --no-cache openssh
    # - mkdir -p ~/.ssh
    # - eval "$(ssh-agent -s)"
    # - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # - chmod 700 ~/.ssh
    # - ssh-keyscan -H '13.57.70.213' >> ~/.ssh/known_hosts
    # - ssh ubuntu@13.57.70.213 "sudo docker rm -f bizb-example-storefront || true && sudo docker image rm -f $DOCKER_USERNAME/bizb:example-storefront || true"
    # - ssh ubuntu@13.57.70.213 "sudo docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
    # # - ssh -x ubuntu@13.57.70.213 "docker login -u $DOCKER_USERNAME -p \"$(echo "$DOCKER_PASSWORD" | sed 's/([^()]*)/\\\1/g')\""
    # - ssh ubuntu@13.57.70.213 "sudo docker pull $DOCKER_USERNAME/bizb:example-storefront"
    # - ssh ubuntu@13.57.70.213 "sudo docker run -d -p 8080:3000 $DOCKER_USERNAME/mechiridion:mechiridion-dev"
    # - ssh ubuntu@13.57.70.213 "sudo docker rm -f mechiridion-backend-container && sudo docker image rm -f $DOCKER_USERNAME/bizb:mechiridion || true && sudo docker run --name mechiridion-backend-container -d --rm -it --network host $DOCKER_USERNAME/mechiridion-api:mechiridion"
    # - ssh ubuntu@13.57.70.213 "sudo docker stop $(sudo docker ps -a -q --filter name=mechiridion-backend-container) 2> /dev/null && docker rm $(sudo docker ps -a -q --filter name=mechiridion-backend-container)"
   

    #- ssh ubuntu@13.57.70.213 "sudo docker run --name bizb-example-storefront -d -it --network host $DOCKER_USERNAME/bizb:example-storefront" 

    # - ssh ubuntu@13.57.70.213 "sudo docker run -d --rm -it --network host $DOCKER_USERNAME/bizb:mechiridion"
  # only:
  #   - staging
