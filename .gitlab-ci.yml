#**** Master ****#

image: docker:19.03.13

services:
  - docker:19.03.13-dind

before_script:
  - rm -rf .cache
  - rm -rf node_modules

stages:
 
  - build
  - deploy



build_image_GKE:
  stage: build
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker build --no-cache -t bizb-frontend-production .
    - docker tag bizb-frontend-production-v0.1 $DOCKER_USERNAME/bizb-gke:bizb-frontend-production
    - docker push $DOCKER_USERNAME/bizb-gke:bizb-frontend-production
  only:
    - master


# build_image_GKE:
#   stage: build

#   script:
#     - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

#     # Calculate the version number based on the pipeline's unique ID (CI_PIPELINE_IID)
#     - export IMAGE_VERSION=0.$CI_PIPELINE_IID

#     - docker build --no-cache -t bizb-frontend-production:$IMAGE_VERSION .
#     - docker tag bizb-frontend-production:$IMAGE_VERSION $DOCKER_USERNAME/bizb-gke:bizb-frontend-production-$IMAGE_VERSION
#     - docker push $DOCKER_USERNAME/bizb-gke:bizb-frontend-production-$IMAGE_VERSION
#   only:
#     - master
# build_docker_image:
#   stage: build
#   script:
#     - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
#     - docker build --no-cache -t bizb-frontend-production .
#     - docker tag bizb-frontend-production $DOCKER_USERNAME/bizb-gcp:bizb-frontend-production
#     - docker push $DOCKER_USERNAME/bizb-gcp:bizb-frontend-production
#   only:
#     - master

# deploy-prod:
#   stage: deploy
#   before_script:
#     - apk add --no-cache openssh
#     - mkdir -p ~/.ssh
#     - eval "$(ssh-agent -s)"
#     - echo "$GCP_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - chmod 700 ~/.ssh
#     - ssh-keyscan -H "$gcp_client" >> ~/.ssh/known_hosts
#   script:
#     - ssh -o StrictHostKeyChecking=no $username@$gcp_client "sudo docker rm -f bizb-frontend-production || true && sudo docker image rm -f $DOCKER_USERNAME/bizb-gcp:bizb-frontend-production || true"
#     - ssh -o StrictHostKeyChecking=no $username@$gcp_client "sudo docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
#     - ssh -o StrictHostKeyChecking=no $username@$gcp_client "sudo docker pull $DOCKER_USERNAME/bizb-gcp:bizb-frontend-production"
#     - ssh -o StrictHostKeyChecking=no $username@$gcp_client "sudo docker run --name bizb-frontend-production -d -it -p 4000:4000 --network host $DOCKER_USERNAME/bizb-gcp:bizb-frontend-production" 
#   only:
#     - master


#**** staging ****#


build_staging:
  stage: build
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker build --no-cache -t bizb-frontend-staging .
    - docker tag bizb-frontend-staging $DOCKER_USERNAME/bizb-gcp:bizb-frontend-staging
    - docker push $DOCKER_USERNAME/bizb-gcp:bizb-frontend-staging
  only:
    - staging


deploy_to_remote:
  stage: deploy
  before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - eval "$(ssh-agent -s)"
    - echo "$staging_key" | tr -d '\r' | ssh-add -
    - chmod 700 ~/.ssh
    - ssh-keyscan -H "$staging_client" >> ~/.ssh/known_hosts
  script:
    - ssh -o StrictHostKeyChecking=no $staging_user@$staging_client "sudo docker rm -f bizb-frontend-staging || true && sudo docker image rm -f $DOCKER_USERNAME/bizb-gcp:bizb-frontend-staging || true"
    - ssh -o StrictHostKeyChecking=no $staging_user@$staging_client "sudo docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
    - ssh -o StrictHostKeyChecking=no $staging_user@$staging_client "sudo docker pull $DOCKER_USERNAME/bizb-gcp:bizb-frontend-staging"
    - ssh -o StrictHostKeyChecking=no $staging_user@$staging_client "sudo docker run --name bizb-frontend-staging -d -it -p 4000:4000 --network host $DOCKER_USERNAME/bizb-gcp:bizb-frontend-staging" 
  only:
    - staging



















#****************AWS pipeline ****************#


# ##master
# stages:
#   - build
#   - deploy

# build_image:
#   stage: build
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   variables:
#     DOCKER_TLS_CERTDIR: "/certs"
  
#   before_script:
#    # - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
#     #- echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" --password-stdin
#     - echo "$DOCKER_PASSWORD_VAR" | docker login -u "$DOCKER_USERNAME" --password-stdin
#     - echo "WOW! You are logged in!!"
#     # - echo "$DOCKER_PASSWORD_VAR" | docker login -u "$DOCKER_USERNAME" --password-stdin
#   script:
#     - echo "Building App"
#    # - docker-compose build --no-cache
#     #- docker-compose build --build-arg IMAGE_NAME=ranchers-tracking-service
#     - docker build --no-cache -t bizb-frontend-production .
#     - docker tag bizb-frontend-production $DOCKER_USERNAME/bizb-frontend-production
#     - docker push $DOCKER_USERNAME/bizb-frontend-production
#    # - docker push $DOCKER_USERNAME/ranchers-tracking-service:latest
   
#   only:
#     - master

# deploy-aws-ecs-dev:
#   stage: deploy
#   image: docker:19.03.1
#   variables:
#     AWS_DEFAULT_REGION: ap-southeast-1
#     AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_dev
#     AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_dev
#     TASK_DEFINITION_NAME: bizb-frontend-task
#     CLUSTER_NAME: bizb-cluster
#     SERVICE_NAME: bizb-frontend
#   services:
#     - docker:19.03.1-dind
#   only:
#     - master
#   before_script:
#     - apk add --no-cache curl jq python3 py3-pip  # Use 'python3' and 'py3-pip' for Python 3
#     - pip3 install awscli  
#     - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#     - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
#     - aws configure set region $AWS_DEFAULT_REGION
#   script:
#     - current_task_definition=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME | jq -r '.services[0].taskDefinition')
#     - new_task_definition=$(aws ecs describe-task-definition --task-definition $current_task_definition | jq -r '.taskDefinition')
#     - new_task_definition=$(echo "$new_task_definition" | jq 'del(.taskDefinitionArn, .revision, .status, .compatibilities, .registeredAt, .registeredBy, .requiresAttributes)')
#     # - aws ecs register-task-definition --cli-input-json "$new_task_definition"
#     - new_task_definition_arn=$(aws ecs register-task-definition --cli-input-json "$new_task_definition" | jq -r '.taskDefinition.taskDefinitionArn')
#     - aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $new_task_definition_arn --force-new-deployment
#     # - aws ecs wait services-stable --cluster $CLUSTER_NAME --services $SERVICE_NAME
#     # - aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME

# image: docker:19.03.13

# services:
#   - docker:19.03.13-dind

# before_script:
#   - rm -rf .cache
#   - rm -rf node_modules

# ##staging
# stages:
#   # - checkout
#   - build
#   - deploy

# # checkout_code:
# #   stage: checkout
# #   script:
# #     - git checkout ranchers-dev
# #     - git pull origin ranchers-dev

# build_docker_image:
#   stage: build
#   script:
#     - echo "$DOCKER_PASSWORD_VAR" | docker login -u "$DOCKER_USERNAME" --password-stdin
#     # - docker rmi ranchers:api
#     # - export IMAGE_TAG=$(date +%Y%m%d%H%M%S)
#     # - git checkout ranchers-dev
#     - docker build --no-cache -t bizb:example-storefront .
#     - docker tag bizb:example-storefront $DOCKER_USERNAME/bizb:example-storefront
#     - docker push $DOCKER_USERNAME/bizb:example-storefront
#   only:
#     - staging

# deploy_to_remote:
#   stage: deploy
#   before_script:
#     - apk add --no-cache openssh
#     - mkdir -p ~/.ssh
#     - eval "$(ssh-agent -s)"
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - chmod 700 ~/.ssh
#     - ssh-keyscan -H '13.57.70.213' >> ~/.ssh/known_hosts
#   script:
#     # - apk add --no-cache openssh
#     # - mkdir -p ~/.ssh
#     # - eval "$(ssh-agent -s)"
#     # - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     # - chmod 700 ~/.ssh
#     # - ssh-keyscan -H '13.57.70.213' >> ~/.ssh/known_hosts
#     - ssh ubuntu@13.57.70.213 "sudo docker rm -f bizb-example-storefront || true && sudo docker image rm -f $DOCKER_USERNAME/bizb:example-storefront || true"
#     - ssh ubuntu@13.57.70.213 "sudo docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
#     # - ssh -x ubuntu@13.57.70.213 "docker login -u $DOCKER_USERNAME -p \"$(echo "$DOCKER_PASSWORD" | sed 's/([^()]*)/\\\1/g')\""
#     - ssh ubuntu@13.57.70.213 "sudo docker pull $DOCKER_USERNAME/bizb:example-storefront"
#     # - ssh ubuntu@13.57.70.213 "sudo docker run -d -p 8080:3000 $DOCKER_USERNAME/mechiridion:mechiridion-dev"
#     # - ssh ubuntu@13.57.70.213 "sudo docker rm -f mechiridion-backend-container && sudo docker image rm -f $DOCKER_USERNAME/bizb:mechiridion || true && sudo docker run --name mechiridion-backend-container -d --rm -it --network host $DOCKER_USERNAME/mechiridion-api:mechiridion"
#     # - ssh ubuntu@13.57.70.213 "sudo docker stop $(sudo docker ps -a -q --filter name=mechiridion-backend-container) 2> /dev/null && docker rm $(sudo docker ps -a -q --filter name=mechiridion-backend-container)"
   

#     - ssh ubuntu@13.57.70.213 "sudo docker run --name bizb-example-storefront -d -it --network host $DOCKER_USERNAME/bizb:example-storefront" 

#     # - ssh ubuntu@13.57.70.213 "sudo docker run -d --rm -it --network host $DOCKER_USERNAME/bizb:mechiridion"
#   only:
#     - staging

